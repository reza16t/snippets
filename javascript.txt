javascript
{  
  "log": {
  "prefix": "log",
  "body": [
      "console.log(${1:$TM_SELECTED_TEXT})"
  ]
},    "Usereducer": {
  "prefix": "Usereducer",
  "body": [
      "const initialState = {${1:}};",
      "\tfunction reducer(state, action) {",
      "\t\tswitch (action.type) {",
      "\t\t\t ${2:}"
      "\t\t}",
      "\t}",
      "\tconst [state, dispatch] = useReducer(reducer, initialState);"
  ]
},    "BrowserRouter": {
  "prefix": "Routes",
  "body": [
      "\t\t\t\t<Routes>",
      "\t\t\t\t\t<Route />",
      "\t\t\t\t</Routes>",
  ]
},    "Route": {
  "prefix": "Route",
  "body": [
      "<Route path=\"${1:/}\" element={<${2:Home} />} />"
  ]
}, "component": {
        "prefix": "component",
        "body": [
            "",
            "export default function ${1:$TM_FILENAME_BASE}()",
            "{",
            "\treturn <div>${2:}</div>",
            "}"
        ]
    },  "UseForm": {
      "prefix": "UseForm",
      "body": [
        "const { register, handleSubmit, watch, formState: { errors } } = useForm();"
      ]
    },    "UseState": {
        "prefix": "UseState",
        "body": [
            "const [${1:state}, set${1:state}] = useState(${2:});"
        ]
    },    "OnChange": {
        "prefix": "OnChange",
        "body": [
            " value={${1:}} onChange={e => set_${1:}(e.target.value)}"
        ]
    },
        "log": {
        "prefix": "log",
        "body": [
            "console.log(${1:$TM_SELECTED_TEXT})"
        ]
    },    "Usereducer": {
        "prefix": "Usereducer",
        "body": [
            "const initialState = {${1:}};",
            "\tfunction reducer(state, action) {",
            "\t\tswitch (action.type) {",
            "\t\t\t ${2:}"
            "\t\t}",
            "\t}",
            "\tconst [state, dispatch] = useReducer(reducer, initialState);"
        ]
    },    "BrowserRouter": {
        "prefix": "Routes",
        "body": [
            "\t\t\t\t<Routes>",
            "\t\t\t\t\t<Route />",
            "\t\t\t\t</Routes>",
        ]
    },    "imBrowserRouter": {
        "prefix": "imBrowserRouter",
        "body": [
            "import { BrowserRouter, Routes, Route } from 'react-router-dom';"
        ]
    },    "imLink": {
        "prefix": "imLink",
        "body": [
            "import {Link} from \"react-router-dom\""
        ]
    },
    "importCSSModule": {
    "prefix": "imstyles",
    "scope": "javascript,typescript,javascriptreact",
    "body": ["import styles from './css_model/${TM_FILENAME_BASE}.module.css'"],
    "description": "Import CSS Module as `styles`"
  },    "UseEffect_req": {
    "prefix": "UseEffect_req",
    "body": [
        "useEffect(() => {",
        "\t\tasync function Fetch() {",
        "\t\t\ttry {",
        "\t\t\t\tconst res = await fetch(URL);",
        "\t\t\t\tconst data = await res.json();",
        "\t\t\t\tconsole.log(data);",
        "\t\t\t} catch (err) {",
        "\t\t\t\tthrow Error('there was an error loading data.. ');",
        "\t\t\t} finally {",
        "\t\t\t\tset_isLoding(false);",
        "\t\t\t}",
        "\t\t}",
        "\t\tFetch();",
        "\t}, []);"
    ]
},    "FormatData": {
        "prefix": "FormatData",
        "body": [
            "const formatDate = date =>",
            "\tnew Intl.DateTimeFormat('en', {",
            "\t\tday: 'numeric',",
            "\t\tmonth: 'long',",
            "\t\tyear: 'numeric',",
            "\t\tweekday: 'long'",
            "\t}).format(new Date(date));"
        ]
    },    "UseSearchParams": {
        "prefix": "UseSearchParams",
        "body": [
            "const [${1:SearchParam}, set${1:SearchParam}] = useSearchParam(${2:});"
        ]
    },    "getSearchParams": {
        "prefix": "getSearchParams",
        "body": [
            "const ${1:lat} = SearchParams.get('${1:lat}');"
        ]
    },    "UseNavigata": {
        "prefix": "UseNavigata",
        "body": [
            "const navigate = useNavigat${1:}();"
        ]
    },     "CreateContext": {
        "prefix": "CreateContext",
        "body": [
            "import { createContext, useState, useEffect,useContext } from 'react';",
            "",
            "const ${TM_FILENAME_BASE} = createContext();",
            "",
            "function ${1:any}Provider ( { children } )",
            "{",
            "\treturn <${TM_FILENAME_BASE}.Provider value={ {${2:}} }>{ children }</${TM_FILENAME_BASE}.Provider>",
            "}",
            "function use${1:} ()",
            "{",
            "\tconst Context = useContext( ${TM_FILENAME_BASE} )",
            "\tif ( Context == undefined )",
            "\t\tthrow new Error (\"${TM_FILENAME_BASE} was used outside the ${1:}Provider \")",
            "\treturn Context ",
            "}",
            "export { use${1:any}, ${1:any}Provider };"
        ]
    },    "UseEffectPost": {
        "prefix": "UseEffectPost",
        "body": [
            "async function addCity(newCity) {",
            "\t\ttry {",
            "\t\t\tconst res = await fetch(URL, {",
            "\t\t\t\tmethod: 'POST',",
            "\t\t\t\tbody: JSON.stringify(n),",
            "\t\t\t\theaders: {",
            "\t\t\t\t\t'Content-Type': 'application/json'",
            "\t\t\t\t}",
            "\t\t\t});",
            "\t\t\tconst data = await res.json();",
            "\t\t\tconsole.log(data);",
            "\t\t} catch (err) {",
            "\t\t\tthrow Error('there was an error loading data.. ');",
            "\t\t} finally {",
            "\t\t\tset_isLoding(false);",
            "\t\t}",
            "\t}"
        ]
    },    "Case": {
        "prefix": "Case",
        "body": [
            "\tcase '${1:}':",
            "\t\treturn { ...state, ${2:}: ${3:action.payload} };"
        ]
    },    "UseNavigation": {
    "prefix": "UseNavigation",
    "body": [
        "const navigation =useNavigation().state === 'loading';"
    ]
},    "FormAction": {
    "prefix": "FormAction",
    "body": [
        "export async function action({ request }) {",
        "\tconst formData = await request.formData();",
        "",
        "\tconst data = Object.fromEntries(formData);",
        "\tconsole.log(data);",
        "\treturn data;",
        "}"
    ]
},  "UseRedux": {
    "prefix": "UseRedux",
    "body": [
      "import { createSlice } from \"@reduxjs/toolkit\";",
      "const initialState = {};",
      "const ${TM_FILENAME_BASE} = createSlice({",
      "\tname: \"${1:}\",",
      "\tinitialState,",
      "\treducers: {${2:}},",
      "});",
      "export const {${3:}} = ${TM_FILENAME_BASE}.actions;",
      "export default ${TM_FILENAME_BASE}.reducer;",
    ]
  },  "UseSelector": {
    "prefix": "UseSelector",
    "body": [
      "const ${1:} = useSelector(state => state.${2:}.${1:} )"
    ]
  },  "UseDispatch": {
    "prefix": "UseDispatch",
    "body": [
      "const dispatch = useDispatc${1:}()"
    ]
  },  "Styled": {
    "prefix": "Styled",
    "body": [
      "import styled,{css}+ from \"styled-components\";",
      "",
      "export const ${TM_FILENAME_BASE} = styled.${1:div}`",
      "",
      "`;"
    ]
  },  "StyledProps": {
    "prefix": "StyledProps",
    "body": [
      "${(props)=>",
      "\tprops.type === \"${1:}\"&&",
      "\t\tcss`",
      "\t\t\t${2:} ",
      "\t\t`",
      "\t\t}"
    ]
  },  "UseSupabase": {
    "prefix": "UseSupabase",
    "body": [
      "import { createClient } from \"@supabase/supabase-js\";",
      "const supabaseUrl = \"${1:}\";",
      "const supabaseKey =",
      "\t\" ${2:} \";",
      "const supabase = createClient(supabaseUrl, supabaseKey);",
      "export default supabase;",
      ""
    ]
  },  "QueryClient": {
    "prefix": "QueryClient",
    "body": [
      "const queryClient = new QueryClient({",
      "\tdefaultOptions: {",
      "\t\tqueries: {",
      "\t\t\tstaleTime: 60 * 1000",
      "\t\t}",
      "\t}",
      "});"
    ]
  },  "FormatCurrency": {
    "prefix": "FormatCurrency",
    "body": [
      "export const formatCurrency = (value) =>",
      "\tnew Intl.NumberFormat('en', { style: 'currency', currency: 'USD' }).format(",
      "\t\tvalue",
      "\t);"
    ]
  },  "UseQueryClient": {
    "prefix": "UseQueryClient",
    "body": [
      "const queryClient = useQueryClient();"
    ]
  },  "UseMutation": {
      "prefix": "UseMutation",
      "body": [
        " const { isLoading, mutate } = useMutation({",
        "\t\tmutationFn:${1:},",
        "\t\tonSuccess: () => {",
        "\t\t\tconsole.log(\"${2:}\");",
        "\t\t\tqueryClient.invalidateQueries({",
        "\t\t\t\tqueryKey: [\"${3:}\"]",
        "\t\t\t});",
        "\t\t},",
        "\t\tonError: (err) => console.error(err.message)",
        "\t});"
      ]
    },  "Toaster": {
      "prefix": "Toaster",
      "body": [
        "\t\t\t<Toaster",
        "\t\t\t\tposition=\"top-center\"",
        "\t\t\t\tgutter={12}",
        "\t\t\t\tcontainerStyle={{ margin: \"8px\" }}",
        "\t\t\t\ttoastOptions={{",
        "\t\t\t\t\tsuccess: {",
        "\t\t\t\t\t\tduration: 3000,",
        "\t\t\t\t\t},",
        "\t\t\t\t\terror: {",
        "\t\t\t\t\t\tduration: 5000,",
        "\t\t\t\t\t},",
        "\t\t\t\t\tstyle: {",
        "\t\t\t\t\t\tfontSize: \"16px\",",
        "\t\t\t\t\t\tmaxWidth: \"500px\",",
        "\t\t\t\t\t\tpadding: \"16px 24px\",",
        "\t\t\t\t\t\tbackgroundColor: \"var(--color-grey-0)\",",
        "\t\t\t\t\t\tcolor: \"var(--color-grey-700)\",",
        "\t\t\t\t\t},",
        "\t\t\t\t}}",
        "\t\t\t/>"
      ]
    },  "UseQuery": {
      "prefix": "UseQuery",
      "body": [
        "const {",
        "\t\tisLoading,",
        "\t\tdata${1:: },",
        "\t\terror",
        "\t} = useQuery({",
        "\t\tqueryKey: [\"${2:}\"],",
        "\t\tqueryFn: ${3:}",
        "\t});"
      ]
    },  "UseEffect": {
      "prefix": "UseEffect",
      "body": [
        " useEffect(() => {",
        "\t",
        "\t},[]);"
      ]
    } , "ReadFile": {
      "prefix": "ReadFile",
      "body": [
        "const readFile = fs.readFileSync(\"${1:}\", \"utf-8\");"
      ]
    },  "WiriteFile": {
      "prefix": "WiriteFile",
      "body": [
        "const writeFile = fs.writeFileSync(\"${1:}\", \"utf-8\");"
      ]
    },  "Require": {
      "prefix": "Require",
      "body": [
        "const ${1:} = require(\"${1:}\");"
      ]
    },  "CreateServer": {
      "prefix": "CreateServer",
      "body": [
        "import { createServer } from \"http\";",
        "import { URL } from \"url\";",
        "",
        "const server = createServer((req, res) => {",
        "\tres.end(\"\");",
        "});",
        "server.listen(3000, () => {",
        "\tconsole.log(\"listening to request on port 8000\");",
        "});"
      ]
    },  "ExpressServer": {
      "prefix": "ExpressServer",
      "body": [
        "const { log } = require('console');",
        "const { readFileSync } = require('fs');",
        "const express = require('express');",
        "const app = express();",
        "const tours = JSON.parse(",
        "\treadFileSync(`${1:$}{__dirname}/dev-data/data/tours-simple.json`, 'utf-8')",
        ");",
        "app.use(express.json());",
        "app.get('${1:}', (req, res) => {",
        "\tres",
        "\t\t.status(200)",
        "\t\t.json({ status: 'success', results: tours.length, data: { tours } });",
        "});",
        "",
        "const PORT = 3000;",
        "app.listen(PORT, () => {",
        "\tlog(`App running on port ${1:$}{PORT}...... `);",
        "});"
      ]
    },  "PostMathod": {
      "prefix": "PostMathod",
      "body": [
        "app.post('${1:}', (req, res) => {",
        "\tlog(req.body);",
        "\tres.send('done');",
        "});"
      ]
    },  "ERouter": {
      "prefix": "ERouter",
      "body": [
        "const express = require('express');",
        "const {",
        "\tgetAll${1:}s,",
        "\tcreate${1:},",
        "\tget${1:},",
        "\tupdate${1:},",
        "\tdelete${1:},",
        "} = require('./../controllers/${2:}Controller');",
        "",
        "const router = express.Router();",
        "",
        "",
        "router.route('/').get(getAll${1:}s).post(create${1:});",
        "",
        "router.route('/:id').get(get${1:}).patch(update${1:}).delete(delete${1:});",
        "",
        "module.exports = router;"
      ]
    },  "EApp": {
      "prefix": "EApp",
      "body": [
        "const express = require('express');",
        "const morgan = require('morgan');",
        "",
        "const app = express();",
        "",
        "// 1) MIDDLEWARES",
        "if (process.env.NODE_ENV === 'development') {",
        "\tapp.use(morgan('dev'));",
        "}",
        "",
        "app.use(express.json());",
        "app.use(express.static(`${__dirname}/public`));",
        "",
        "app.use((req, res, next) => {",
        "\treq.requestTime = new Date().toISOString();",
        "\tnext();",
        "});",
        "",
        "// 3) ROUTES",
        "app.get('/', (req, res) => {",
        "\tres.send('fuck');",
        "});",
        "module.exports = app;"
      ]
    },  "NodeServer": {
      "prefix": "NodeServer",
      "body": [
        "const dotenv = require('dotenv');",
        "const app = require('./App');",
        "",
        "dotenv.config({ path: './config.env' });",
        "",
        "const port = process.env.PORT || 3000;",
        "app.listen(port, () => {",
        "\tconsole.log(`App running on port ${port}...`);",
        "});",
        ""
      ]
    },  "MongooseConnect": {
      "prefix": "MongooseConnect",
      "body": [
        "const DB = process.env.DATABASE.replace(",
        "\t'<password>',",
        "\tprocess.env.DATABASE_PASSWORD,",
        ");",
        "mongoose.connect(DB).then((con) => {",
        "\tconsole.log(con.connections);",
        "\tconsole.log('fuck u db');",
        "});"
      ]
    },  "\\": {
      "prefix": "DBModel",
      "body": [
        "const tourSchema = new mongoose.Schema({",
        "\tname: {",
        "\t\ttype: String,",
        "\t\trequire: [true, 'tour most have name '],",
        "\t},",
        "});",
        "const Tors = mongoose.model('${1:}', tourSchema);"
      ]
    },  "mongooseFilter": {
      "prefix": "mongooseFilter",
      "body": [
        "const objQuery = { ...req.query };",
        "\t\tconst excludedField = ['page', 'sort', 'limit', 'fields'];",
        "\t\texcludedField.forEach((i) => {",
        "\t\t\tdelete objQuery[i];",
        "\t\t});",
        "\t\tlet objStr = JSON.stringify(objQuery);",
        "\t\tobjStr = objStr.replace(/\\b(gt|gte|lt|lte)\\b/g, (i) => `\\$${i}`);",
        "",
        "\t\tlet query = ${1:}.find(JSON.parse(objStr));"
      ]
    },  "mongoosSort": {
      "prefix": "mongoosSort",
      "body": [
        "if (req.query.sort) {",
        "\t\t\tconst sortBy = req.query.sort.split(',').join(' ');",
        "\t\t\tquery = query.sort(sortBy);",
        "\t\t} else {",
        "\t\t\tquery = query.sort('-createdAt');",
        "\t\t}"
      ]
    },  "NextAppLayout": {
      "prefix": "NextAppLayout",
      "body": [
        "import \"@styles/globals.css\";",
        "",
        "export const metadata = {",
        "\ttitle: \"Promptopia\",",
        "\tdescription: \"Discover & Share AI Prompts\"",
        "};",
        "",
        "const RootLayout = ({ children }) => (",
        "\t<html lang=\"en\">",
        "\t\t<body>",
        "\t\t\t<div className=\"main\">",
        "\t\t\t\t<div className=\"gradient\" />",
        "\t\t\t</div>",
        "",
        "\t\t\t<main className=\"app\">{children}</main>",
        "\t\t</body>",
        "\t</html>",
        ");",
        "",
        "export default RootLayout;"
      ]
    },   "component": {
      "prefix": "component",
      "body": [
          "function ${1:$TM_FILENAME_BASE}()",
          "{",
          "\treturn <div>${2:}</div>",
          "}",
          "export default ${1:$TM_FILENAME_BASE};"
      ]
    },    "UseState": {
        "prefix": "UseState",
        "body": [
            "const [${1:state}, set_${1:state}] = useState(${2:});"
        ]
    },    "OnChange": {
        "prefix": "OnChange",
        "body": [
            " value={${1:}} onChange={e => set_${1:}(e.target.value)}"
        ]
    },
        "log": {
        "prefix": "log",
        "body": [
            "console.log(${1:$TM_SELECTED_TEXT})"
        ]
    },    "Usereducer": {
        "prefix": "Usereducer",
        "body": [
            "const initialState = {${1:}};",
            "\tfunction reducer(state, action) {",
            "\t\tswitch (action.type) {",
            "\t\t\t ${2:}"
            "\t\t}",
            "\t}",
            "\tconst [state, dispatch] = useReducer(reducer, initialState);"
        ]
    },    "BrowserRouter": {
        "prefix": "Routes",
        "body": [
            "\t\t\t\t<Routes>",
            "\t\t\t\t\t<Route />",
            "\t\t\t\t</Routes>",
        ]
    },    "imBrowserRouter": {
        "prefix": "imBrowserRouter",
        "body": [
            "import { BrowserRouter, Routes, Route } from 'react-router-dom';"
        ]
    },    "Route": {
        "prefix": "Route",
        "body": [
            "<Route path=\"${1:/}\" element={<${2:Home} />} />"
        ]
    },  "Appwrite": {
  "prefix": "Appwrite",
  "body": [
    "import { Client, Account } from \"appwrite\";",
    "",
    "export const appwriteConfig = {",
    "\tprojectId: import.meta.env.VITE_APPWRITE_PROJECT_ID,",
    "\turl: import.meta.env.VITE_APPWRITE_URL,",
    "};",
    "",
    "const client = new Client();",
    "",
    "client.setEndpoint(appwriteConfig.url).setProject(\"6589a65a9710e9278a85\");",
    "export const account = new Account(client);",
    ""
  ]
    },  "AppwriteCreateUser": {
      "prefix": "AppwriteCreateUser",
      "body": [
        "import { INewUser } from \"@/types\";",
        "import { account } from \"./appwrite\";",
        "import { ID } from \"appwrite\";",
        "export async function createUser(user: INewUser) {",
        "\ttry {",
        "\t\tconst newAccount = await account.create(",
        "\t\t\tID.unique(),",
        "\t\t\tuser.email,",
        "\t\t\tuser.password,",
        "\t\t\tuser.name,",
        "\t\t);",
        "",
        "\t\treturn newAccount;",
        "\t} catch (error) {",
        "\t\tconsole.log(error);",
        "\t\treturn error;",
        "\t}",
        "}"
      ]
    },  "UseQueryFile": {
      "prefix": "UseQueryFile",
      "body": [
        "import { useQuery } from \"@tanstack/react-query\";",
        "",
        "export function useUser() {",
        "\tconst {",
        "\t\tisLoading,",
        "\t\tdata,",
        "\t\terror,",
        "\t} = useQuery({",
        "\t\tqueryKey: [\"\"],",
        "\t\tqueryFn: ,",
        "\t});",
        "",
        "\treturn { isLoading, error,data};",
        "}",
        ""
      ]
    },  "UseMutationFile": {
      "prefix": "UseMutationFile",
      "body": [
        "import { useMutation, useQueryClient } from \"@tanstack/react-query\";",
        "",
        "export default function UseSignUp() {",
        "\tconst queryClient = useQueryClient();",
        "\tconst { isPending, mutate } = useMutation({",
        "\t\tmutationFn:,",
        "\t\tonSuccess: () => {",
        "\t\t\tconsole.log(\"\");",
        "\t\t\tqueryClient.invalidateQueries({",
        "\t\t\t\tqueryKey: [\"\"]",
        "\t\t\t});",
        "\t\t},",
        "\t\tonError: (err) => console.error(err.message)",
        "\t});",
        "\treturn {isPending,mutate}",
        "}"
      ]
    },  "UseLocation": {
      "prefix": "UseLocation",
      "body": [
        "const { pathname } = useLocation();"
      ]
    } ,  "viteStarter": {
      "prefix": "viteStarter",
      "body": [
        "import { defineConfig } from 'vite';",
        "import react from '@vitejs/plugin-react';",
        "import eslint from 'vite-plugin-eslint';",
        "// https://vitejs.dev/config/",
        "export default defineConfig({",
        "\tplugins: [react(), eslint()]",
        "});",
        ""
      ]
    },  "eslint.cjs": {
      "prefix": "eslint.cjs",
      "body": [
        "module.exports = {",
        "\troot: true,",
        "\tenv: { browser: true, es2020: true },",
        "\textends: [",
        "\t\t\"eslint:recommended\",",
        "\t\t\"plugin:react/recommended\",",
        "\t\t\"plugin:react/jsx-runtime\",",
        "\t\t\"plugin:react-hooks/recommended\"",
        "\t],",
        "\tignorePatterns: [\"dist\", \".eslintrc.cjs\"],",
        "\tparserOptions: { ecmaVersion: \"latest\", sourceType: \"module\" },",
        "\tsettings: { react: { version: \"18.2\" } },",
        "\tplugins: [\"react-refresh\"],",
        "\trules: {",
        "\t\t\"react-refresh/only-export-components\": [",
        "\t\t\t\"warn\",",
        "\t\t\t{ allowConstantExport: true }",
        "\t\t]",
        "\t},",
        "\trules: {",
        "\t\t\"react/prop-types\": \"off\",",
        "\t\t\"no-unused-vars\": \"warn\"",
        "\t}",
        "};"
      ]
    }

}
//////////////////////////////////////////////////////////
 